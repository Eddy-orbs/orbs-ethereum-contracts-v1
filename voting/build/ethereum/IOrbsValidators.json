{
  "contractName": "IOrbsValidators",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "ValidatorApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "ValidatorRemoved",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "approve",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "remove",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "isValidator",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "isApproved",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getValidators",
      "outputs": [
        {
          "name": "",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getValidatorsBytes20",
      "outputs": [
        {
          "name": "",
          "type": "bytes20[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "getApprovalBlockNumber",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "sourceMap": "",
  "deployedSourceMap": "",
  "compiler": {
    "name": "solc",
    "version": "0.4.25+commit.59dbf8f1.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.2",
  "updatedAt": "2019-03-24T18:25:48.978Z",
  "devdoc": {
    "methods": {
      "approve(address)": {
        "details": "Adds a validator to participate in network",
        "params": {
          "validator": "address The address of the validators."
        }
      },
      "getApprovalBlockNumber(address)": {
        "details": "returns the block number in which the validator was approved.",
        "params": {
          "validator": "address The address of the validators."
        }
      },
      "getValidators()": {
        "details": "returns a list of all validators that have been approved and exist in the validator registration database."
      },
      "getValidatorsBytes20()": {
        "details": "returns a list of all validators that have been approved and exist in the validator registration      database. same as getValidators but returns addresses represented as byte20."
      },
      "isApproved(address)": {
        "details": "returns if an address belongs to the approved list",
        "params": {
          "validator": "address The address of the validators."
        }
      },
      "isValidator(address)": {
        "details": "returns if an address belongs to the approved list & exists in the validators metadata registration database.",
        "params": {
          "validator": "address The address of the validators."
        }
      },
      "remove(address)": {
        "details": "Remove a validator from the List based on Guardians votes.",
        "params": {
          "validator": "address The address of the validators."
        }
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}